/users/register:
    post:
      tags:
        - users
      summary: Register as a new user.
      
      description: >-
        The email must be syntactically valid (e.g. it has to include an `@`, but whether or not it is actually a registered email address will not be checked). The email address must not already be in use. The password must not be an empty string.
      
      requestBody:
        content:
          application/json:
            schema:
              title: RegisterUserRequest
              properties:
                firstName:
                  $ref: '#/components/schemas/User/properties/firstName'
                lastName:
                  $ref: '#/components/schemas/User/properties/lastName'
                email:
                  $ref: '#/components/schemas/User/properties/email'
                password:
                  $ref: '#/components/schemas/FullUser/properties/password'
              required:
                - firstName
                - lastName
                - email
                - password
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                properties:
                  userId:
                    $ref: '#/components/schemas/FullUser/properties/userId'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error


   /users/login:
    post:
      tags:
        - users
      summary: Log in as an existing user.
      description: >-
        The response will contain a (unique) randomly-generated token that the client-side should store. 


        Whenever the client makes a request that requires authentication, it
        should provide that same token as the value of the `X-Authorization`
        header in the request. 


        The server will compare this to the value it has stored in the database to authenticate that request.
      requestBody:
        content:
          application/json:
            schema:
              title: LoginRequest
              properties:
                email:
                  $ref: '#/components/schemas/User/properties/email'
                password:
                  $ref: '#/components/schemas/FullUser/properties/password'
              required:
                - email
                - password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: LoginSuccessResponse
                properties:
                  userId:
                    $ref: '#/components/schemas/FullUser/properties/userId'
                  token:
                    $ref: '#/components/schemas/FullUser/properties/userToken'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /users/logout:
    post:
      tags:
        - users
      summary: Log out the currently authorised user.
      security:
        - UserToken: []
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  '/users/{id}':
    parameters:
      - name: id
        description: ID of the user.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FullUser/properties/userId'
    get:
      tags:
        - users
      summary: Retrieve information about a user.
      description: >-
        The email field is only included when the currently authenticated user is viewing their **own** details.
      security:
        - {}
        - UserToken: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      tags:
        - users
      summary: Change a user's details.
      description: >-
        Only accessible by the user themselves. The email must be syntactically valid (e.g. it has to include an `@`, but whether or not it is actually a registered email address will not be checked). The email address must not already be in use. The password must not be an empty string. If the password is being changed, then the current password must also be provided.
      security:
        - UserToken: []
      requestBody:
        content:
          application/json:
            schema:
              title: ChangeUserDetailsRequest
              properties:
                firstName:
                  $ref: '#/components/schemas/User/properties/firstName'
                lastName:
                  $ref: '#/components/schemas/User/properties/lastName'
                email:
                  $ref: '#/components/schemas/User/properties/email'
                password:
                  $ref: '#/components/schemas/FullUser/properties/password'
                currentPassword:
                  $ref: '#/components/schemas/FullUser/properties/password'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  '/users/{id}/image':
    parameters:
      - name: id
        description: ID of the user.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FullUser/properties/userId'
    get:
      tags:
        - users.images
      summary: Retrieve a user's profile image.
      description: >-
        The response MIME type will be either `image/png`, `image/jpeg`, or `image/gif`, depending on the file type of the image being retrieved.
      responses:
        '200':
          description: OK
          content:
            image:
              schema:
                $ref: '#/components/schemas/BinaryImageFile'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      tags:
        - users.images
      summary: Set a user's profile image.
      description: >-
        Only accessible to the user themselves. If the user already has a profile photo, the current profile photo will be replaced with it, and a 200 OK response will be sent. If not, a 201 Created response will be sent.


        If the file is a `.png`, the request will be sent with `Content-Type: image/png`. If the file is a `.jpeg` or `.jpg`, the request will be sent with `Content-Type: image/jpeg`. If the file is a `.gif`, the request will be sent with `Content-Type: image/gif`.


        The request body should contain the raw binary content of the photo, i.e. it should not be in `multipart/form-data` format or contain any file metadata. 
      security:
        - UserToken: []
      requestBody:
        content:
          image/png:
            schema:
              $ref: '#/components/schemas/BinaryImageFile'
          image/jpeg:
            schema:
              $ref: '#/components/schemas/BinaryImageFile'
          image/gif:
            schema:
              $ref: '#/components/schemas/BinaryImageFile'
        required: true
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - users.images
      summary: Delete a user's profile image.
      security:
        - UserToken: []
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /reload:
    post: